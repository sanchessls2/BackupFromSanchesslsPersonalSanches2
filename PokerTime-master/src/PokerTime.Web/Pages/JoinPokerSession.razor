@page "/pokertime-session/{sessionId}/join"
@implements PokerTime.Application.Notifications.SessionJoined.ISessionJoinedSubscriber
@inherits SubscribingComponent<PokerTime.Application.Notifications.SessionJoined.ISessionJoinedSubscriber>
@layout PokerSessionLayout
@inject ILogger<JoinPokerSession> Logger
@inject NavigationManager NavigationManager;
@using Microsoft.Extensions.Logging
@using PokerTime.Application.Notifications
@using PokerTime.Application.PredefinedParticipantColors.Queries.GetAvailablePredefinedParticipantColors
@using PokerTime.Application.Sessions.Commands.JoinPokerSession
@using PokerTime.Application.Sessions.Queries.GetJoinPokerSessionInfo
@using PokerTime.Application.Sessions.Queries.GetParticipant
@using PokerTime.Application.Sessions.Queries.GetParticipantsInfo
@using PokerTime.Web.Components.Layout

@if (this.SessionInfo == null)
{
    <h1 class="title">Session not found</h1>

    <p class="form-explanation">
        Sorry, I can't find that planning poker session. Please check if the URL is correct.
    </p>
}
else
{
    <h1 class="title">Join planning poker session: @this.SessionInfo.Title</h1>
    <h2 class="subtitle">To estimate your next moves</h2>

    <div class="columns">
        <div class="column is-three-quarters">
            <p class="form-explanation">
                Join the planning poker session "@this.SessionInfo.Title" by filling in the necessary information on the form below.
            </p>

            @if (this.SessionInfo.IsFinished)
            {
                <Notification Type="Notification.NotificationType.Warning">
                    This session has already finished. You can log in and view the past results but you won't be able to participate anymore.
                </Notification>
            }
            else if (this.SessionInfo.IsStarted)
            {
                <Notification Type="Notification.NotificationType.Info">
                    This session has already started. Hurry up!
                </Notification>
            }

            @if (ShowErrorMessage)
            {
                <ErrorMessage Text="Something went wrong joining the session. Please try again." />
            }

            <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                <Blazored.FluentValidation.FluentValidationValidator />

                <div class="field">
                    <label class="label" for="pokertime-name">Your name</label>
                    <div class="control">
                        <InputText id="pokertime-name"
                                   class="input"
                                   type="text"
                                   @bind-Value="@Model.Name"
                                   @onblur="@OnParticipantNameChanged"
                                   placeholder="Enter your name, so we know who you are" />
                    </div>

                    <ValidationMessage For="() => Model.Name"></ValidationMessage>
                    @if (this.ShowParticipantAlreadyJoinedWarning)
                    {
                        <p class="help is-info">@Model.Name has already joined the session. If this was not you, please choose a different name.</p>
                    }
                </div>

                @if (UseOwnColor || this.AvailablePredefinedColors.Count == 0)
                {
                    <div class="field">
                        <label class="label" for="pokertime-color">Your custom color</label>
                        <div class="control">
                            <InputText id="pokertime-color" type="color" class="input input--pokertime-color" @bind-Value="@Model.Color" disabled="@(this.ShowParticipantAlreadyJoinedWarning ? "disabled" : null)" />
                        </div>

                        <ValidationMessage For="() => Model.Color"></ValidationMessage>
                    </div>
                }
                else
                {
                    <div class="field">
                        <label class="label">Your color</label>
                        <div class="control">
                            <div class="field has-addons">
                                <div class="control">
                                    <div class="select">
                                        <InputSelect @bind-Value="@Model.Color" id="pokertime-color-choices">
                                            <option value="">Select an option</option>
                                            @foreach (AvailableParticipantColorModel color in this.AvailablePredefinedColors)
                                                    {
                                                <option style="color: #@color.HexString" value="#@color.HexString">@color.Name</option>
                                                    }
                                        </InputSelect>
                                    </div>
                                </div>
                                <div class="control">
                                    <button type="button" class="button is-info" @onclick="@ChooseOwnColor">
                                        Custom color
                                    </button>
                                </div>
                            </div>
                        </div>

                        <ValidationMessage For="() => Model.Color"></ValidationMessage>
                    </div>
                }

                <div class="field">
                    <div class="control">
                        <label class="checkbox">
                            <InputCheckbox @bind-Value="@Model.JoiningAsFacilitator" id="pokertime-is-facilitator" disabled="@(this.ShowParticipantAlreadyJoinedWarning ? "disabled" : null)" />
                            I'm the facilitator of this planning poker
                        </label>
                    </div>
                </div>

                @if (Model.JoiningAsFacilitator)
                {
                    <div class="field">
                        <label class="label" for="pokertime-facilitator-passphrase">Facilitator passphrase</label>
                        <div class="control">
                            <InputText id="pokertime-facilitator-passphrase" class="input" type="text" @bind-Value="@Model.Passphrase" placeholder="" />
                        </div>

                        <ValidationMessage For="() => Model.Passphrase"></ValidationMessage>
                        <p class="help">You should have set this password yourself. If you've lost it, create a new planning poker instead.</p>
                    </div>
                }
                else if (this.SessionInfo.NeedsParticipantPassphrase)
                {
                    <div class="field">
                        <label class="label" for="pokertime-passphrase">Passphrase</label>
                        <div class="control">
                            <InputText id="pokertime-passphrase" class="input" type="text" @bind-Value="@Model.Passphrase" placeholder="" />
                        </div>

                        <ValidationMessage For="() => Model.Passphrase"></ValidationMessage>
                        <p class="help">You should have got this in the invitation.</p>
                    </div>
                }

                <div class="field is-grouped">
                    <div class="control">
                        <button class="button is-link" id="join-pokertime-button">
                            <span class="icon is-small"><i class="fas fa-door-open"></i></span>
                            <span>Continue</span>
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>

        <div class="column">
            <SessionOnlineList SessionId="@this.SessionId" />
        </div>
    </div>
}


@code
{
#nullable disable
    [Parameter]
    public string SessionId { get; set; }

    private JoinPokerSessionInfo SessionInfo { get; set; }
    private IList<AvailableParticipantColorModel> AvailablePredefinedColors { get; set; }
    private bool ShowErrorMessage { get; set; }
    private bool ShowParticipantAlreadyJoinedWarning { get; set; }

    [Parameter]
    public JoinPokerSessionCommand Model { get; set; } = new JoinPokerSessionCommand();

    [Parameter]
    public bool UseOwnColor { get; set; }

    [CascadingParameter]
    public IPokerSessionLayout Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.SessionInfo = await this.Mediator.Send(new GetJoinPokerSessionInfoQuery { SessionId = this.SessionId });

        if (this.SessionInfo != null)
        {
            this.Layout?.Update(new PokerSessionLayoutInfo(this.SessionInfo.Title));
            this.AvailablePredefinedColors = await this.Mediator.Send(new GetAvailablePredefinedParticipantColorsQuery(this.SessionId));
        }
        else
        {
            this.Layout?.Update(new PokerSessionLayoutInfo("Not found"));
        }
    }

    protected override void OnParametersSet()
    {
        this.Model.SessionId = this.SessionId;
    }

    private void ChooseOwnColor()
    {
        this.UseOwnColor = true;
    }

    private async Task OnParticipantNameChanged()
    {
        if (String.IsNullOrEmpty(this.Model.Name))
        {
            return;
        }

        bool wasShowingParticipantWarning = this.ShowParticipantAlreadyJoinedWarning;

        ParticipantInfo result = await this.Mediator.Send(new GetParticipantQuery(this.Model.Name, this.SessionId));
        this.ShowParticipantAlreadyJoinedWarning = result != null;

        if (result != null)
        {
            // Disable controls as the choice has already been made
            this.Model.JoiningAsFacilitator = result.IsFacilitator;
            this.UseOwnColor = this.AvailablePredefinedColors.Any(x => x.HasSameColors(result.Color)) == false;
            this.Model.Color = "#" + result.Color.HexString;
        }
        else if (wasShowingParticipantWarning)
        {
            // Reset form to use normal controls
            this.UseOwnColor = false;
            this.Model.Color = null;
            this.Model.JoiningAsFacilitator = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        this.ShowErrorMessage = false;

        try
        {
            this.Model.Color = this.Model.Color?.TrimStart('#');
            this.Model.Color = this.Model.Color?.Length != 6 ? "CCCCCC" : this.Model.Color;

            await this.Mediator.Send(this.Model);
        }
        catch (Exception ex)
        {
            this.ShowErrorMessage = true;

            Logger.LogError(ex, $"Error joining planning poker session {this.SessionId} with name {this.Model.Name}");
            return;
        }

        this.NavigationManager.NavigateTo("pokertime-session/" + this.SessionId + "/lobby");
    }

    private void HandleInvalidSubmit()
    {
        this.ShowErrorMessage = false;
    }

    public Task OnParticipantJoinedRetrospective(SessionEvent<ParticipantInfo> eventArgs)
    {
        if (eventArgs.SessionId != this.SessionId)
        {
            return Task.CompletedTask;
        }

        return this.InvokeAsync(async () =>
        {
            this.AvailablePredefinedColors = await this.Mediator.Send(new GetAvailablePredefinedParticipantColorsQuery(this.SessionId));

            this.NotificationIsHandled();
        });
    }
}
